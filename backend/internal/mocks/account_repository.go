// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	dbmodels "github.com/norbix/demo1_fullstack_golang/backend/internal/db/dbmodels"
	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: _a0
func (_m *AccountRepository) CreateAccount(_a0 dbmodels.Account) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(dbmodels.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AccountRepository_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type AccountRepository_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - _a0 dbmodels.Account
func (_e *AccountRepository_Expecter) CreateAccount(_a0 interface{}) *AccountRepository_CreateAccount_Call {
	return &AccountRepository_CreateAccount_Call{Call: _e.mock.On("CreateAccount", _a0)}
}

func (_c *AccountRepository_CreateAccount_Call) Run(run func(_a0 dbmodels.Account)) *AccountRepository_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dbmodels.Account))
	})
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) Return(_a0 error) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountRepository_CreateAccount_Call) RunAndReturn(run func(dbmodels.Account) error) *AccountRepository_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccounts provides a mock function with given fields: _a0, _a1
func (_m *AccountRepository) GetAccounts(_a0 int, _a1 int) (map[string]interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (map[string]interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, int) map[string]interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccounts'
type AccountRepository_GetAccounts_Call struct {
	*mock.Call
}

// GetAccounts is a helper method to define mock.On call
//   - _a0 int
//   - _a1 int
func (_e *AccountRepository_Expecter) GetAccounts(_a0 interface{}, _a1 interface{}) *AccountRepository_GetAccounts_Call {
	return &AccountRepository_GetAccounts_Call{Call: _e.mock.On("GetAccounts", _a0, _a1)}
}

func (_c *AccountRepository_GetAccounts_Call) Run(run func(_a0 int, _a1 int)) *AccountRepository_GetAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *AccountRepository_GetAccounts_Call) Return(_a0 map[string]interface{}, _a1 error) *AccountRepository_GetAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAccounts_Call) RunAndReturn(run func(int, int) (map[string]interface{}, error)) *AccountRepository_GetAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
